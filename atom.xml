<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 <title>Pallet, DevOps for the JVM</title>
 <link href="http://palletops.com/atom.xml" rel="self"/>
 <link href="http://palletops.com/"/>
 <updated>2014-08-12T19:53:40+00:00</updated>
 <id>http://palletops.com/</id>
 <author>
   <name>Antoni Batchelli</name>
   <email>tbatchelli@palletops.com</email>
 </author>
 <!-- blog posts -->
 
 <entry>
   <title>Article: Run clojure projects on Docker with lein-uberimage</title>
   <link href="http://palletops.com//blog/lein-uberimage"/>
   <updated>2014-08-07T00:00:00+00:00</updated>
   <id>http://palletops.com//blog/lein-uberimage</id>
   <content type="html">&lt;p&gt;We built a lein plugin to make it easy to run clojure projects in Docker containers. This article first introduces containers and Docker, and then shows how you can effortlessly create such containers for your Clojure projects with &lt;code&gt;lein uberimage&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;&lt;image src=&quot;/images/docker-large-h-trans.png&quot; alt=&quot;Docker logo&quot; class=&quot;img-responsive&quot;&gt;&lt;/p&gt;

&lt;h2&gt;Why Containers and Why Docker&lt;/h2&gt;

&lt;p&gt;A container is a lighweight form of computer virtualization. Containers run within a host, and a host can run many containers concurrently. Each container is functionally equivalent to a computer loaded with a full OS, but behind the scenes all containers in the same host are sharing the same host resources: kernel, memory, IO, and disk.&lt;/p&gt;

&lt;p&gt;There are many ways of virtualization technologies used today, VirtualBox, Xen (used by Amazon Web Services) and vmware to name a few, but what makes containers special is their lightweight nature. Each container uses very little resources (disk, memory, cpu) and they all boot orders of magnitude faster than a virtual machine or
a computer.&lt;/p&gt;

&lt;p&gt;Containers are very convenient for both development and production environments. For development, they provide a fast and simple way to run different and isolated runtime environments for each application. In production, they are very fast and efficient, with the added bonus that containers in production always match the ones in development; the same exact containers are used during all app&amp;#39;s lifecycle.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.docker.com&quot;&gt;Docker&lt;/a&gt; is a novel container technology for Linux that provides a very low friction access to containers. Containers have been around for a while, and the Linux kernel has provided key container technologies for a while already. Docker wraps all these kernel features under a high level API and defines a standard container and image formats using union filesystems. To make containers easy to share and distribute, Docker also provides public and private image repositories. All these features have brought containers to the masses.&lt;/p&gt;

&lt;p&gt;Although Docker is currently Linux only, you can use it on OSX installing &lt;a href=&quot;http://boot2docker.io&quot;&gt;boot2docker&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For a more detailed introduction to Docker, check out this video on &lt;a href=&quot;http://sysadmincasts.com/episodes/31-introduction-to-docker&quot;&gt;sysadmincasts.com&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Docker images&lt;/h2&gt;

&lt;p&gt;Each container is a process tree that is started from an existing image. These images contain a filesystem with the files necessary to run your application. Sometimes this entails a linux distribution and sometimes just one statically linked binary. The common practice in the Docker world is to build a custom image for each type of service you intend to run. This contrasts with other forms of virtualization where you start the VMs from a base image and then you configure them with the required software. In the case of VMs, the time it takes a VM to boot until it is ready to run your application is measured in minutes, whereas in Docker a container can boot in sub-second times.&lt;/p&gt;

&lt;h2&gt;Building Docker images with uberimage&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;lein-uberimage&lt;/code&gt; builds a Docker image for clojure projects. The generated images contain a base operating system, a java runtime, and your project&amp;#39;s &lt;code&gt;uberjar&lt;/code&gt;. Once this image is built, you can instantiate as many containers as you need using this image, each container running your &lt;code&gt;uberjar&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;At the time of writing this, &lt;code&gt;lein-uberimage&lt;/code&gt; requires that the project builds with &lt;code&gt;lein uberjar&lt;/code&gt; and that the resulting jar can be run via &lt;code&gt;java -jar &amp;lt;your-uberjar&amp;gt;.jar&lt;/code&gt;. This means your &lt;code&gt;project.clj&lt;/code&gt; will have to have a &lt;code&gt;:main&lt;/code&gt; entry pointing to the &lt;code&gt;-main&lt;/code&gt; function in your code. This restriction will be removed in the future.&lt;/p&gt;

&lt;p&gt;To build the Docker image for your project, run the following in your project&amp;#39;s root:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;lein uberimage
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;uberimage&lt;/code&gt; will call lein&amp;#39;s &lt;code&gt;uberjar&lt;/code&gt; to build the standalone jar file. Then it will build a new image with &lt;code&gt;Ubuntu 14.04&lt;/code&gt;, &lt;code&gt;OpenJDK 7&lt;/code&gt; and the freshly built jar. The image is also configured to run your jar file on boot. This task will return the &lt;code&gt;uuid&lt;/code&gt; for this image.&lt;/p&gt;

&lt;p&gt;From this image you just created, you can spawn as many containers as you need. The most basic way to start a container is this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &amp;lt;my-image-uuid&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In most cases, your app won&amp;#39;t be useful unless you can access it via known ports, and by default, Docker does not expose any ports of a container, so you need to tell Docker to expose those ports. Since you will be running many containers on the same host you need to ensure that not two containers are bound to the same port. For example, if your application listens on port 3000, you need to tell Docker to bind the container&amp;#39;s port 3000 to any unbound port in the host, e.g. 8080:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run -p 8080:3000 &amp;lt;my-image-uuid&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once the container has started, just head over to &lt;code&gt;http://&amp;lt;docker-host&amp;gt;:8080&lt;/code&gt; to access your newly deployed service. If you launch a second container with the same image, you cannot bind it to the same host port (8080 in this case) and you should instead map it to port 8081 &lt;code&gt;docker run -p 8081:3000 ...&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;Trying It Out&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.docker.com/installation/#installation&quot;&gt;Install&lt;/a&gt; Docker.&lt;/li&gt;
&lt;li&gt;Clone this &lt;a href=&quot;https://github.com/tbatchelli/compojure-example&quot;&gt;example clojure project&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;On the project root, run &lt;code&gt;lein uberimage&lt;/code&gt; and copy the supplied image uuid&lt;/li&gt;
&lt;li&gt;At the shell, run &lt;code&gt;docker run -d -p 3000:3000 &amp;lt;image-uuid&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Open the browser and head on to &lt;code&gt;http://&amp;lt;docker-host&amp;gt;:3000&lt;/code&gt;. Docker-host could be &lt;code&gt;localhost&lt;/code&gt; in case you are in linux, or the boot2docker IP address if you are using boot2docker.&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;docker run -d -p 3001:3000 &amp;lt;image-uuid&amp;gt;&lt;/code&gt; to run a second instance and check &lt;code&gt;http://&amp;lt;docker-host&amp;gt;:3001&lt;/code&gt; with your browser. Notice the different IP address.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Additional Options&lt;/h2&gt;

&lt;p&gt;In case the supplied OS and java versions are not what you&amp;#39;re looking for, you can supply your own base image to &lt;code&gt;lein-uberimage&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;lein uberimage -b &amp;lt;your-image-with-jvm&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And in case your Docker is not locally installed on the default port or it is remote, you can override its url:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;lein uberimage -H http://&amp;lt;host&amp;gt;:&amp;lt;port&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Concluding remarks&lt;/h2&gt;

&lt;p&gt;There is not much more to it for now. This is our first stab at helping clojurians leverage containers. Please submit bugs and ideas to our project&amp;#39;s &lt;a href=&quot;https://github.com/palletops/lein-uberimage/issues&quot;&gt;Issues&lt;/a&gt; or drop by our chatroom &lt;a href=&quot;http://webchat.freenode.net/?channels=pallet&quot;&gt;#pallet&lt;/a&gt; on freenode.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;lein-uberimage&lt;/code&gt; is build on top of &lt;a href=&quot;https://github.com/palletops/clj-docker.&quot;&gt;clj-docker&lt;/a&gt;, a clojure wrapper over docker.&lt;/p&gt;
</content>
   <author>
     <name>Antoni Batchelli</name>
     <uri></uri>
   </author>
 </entry>
 
 <entry>
   <title>Article: Alembic - a library to control your classpath</title>
   <link href="http://palletops.com//alembic-clojure-classpath-control"/>
   <updated>2013-04-29T00:00:00+00:00</updated>
   <id>http://palletops.com//alembic-clojure-classpath-control</id>
   <content type="html">&lt;p&gt;Working at the REPL in clojure flows well until you need to add a dependency.
The edit &lt;code&gt;project.clj&lt;/code&gt; and restart your REPL dance is time consuming, and throws
away the state of your REPL.&lt;/p&gt;

&lt;p&gt;Chas Emerick&amp;#39;s &lt;a href=&quot;https://github.com/cemerick/pomegranate&quot;&gt;pomegranate&lt;/a&gt; provides
all the functionality required to add dependencies to your classpath in a
running JVM instance, but comes at the cost of introducing a boatload of
dependencies that may conflict with your project&amp;#39;s own dependencies.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/pallet/alembic&quot;&gt;Alembic&lt;/a&gt; is a new library that solves this
by using &lt;a href=&quot;https://github.com/flatland/classlojure&quot;&gt;classlojure&lt;/a&gt; to put
&lt;a href=&quot;https://github.com/cemerick/pomegranate&quot;&gt;pomegranate&lt;/a&gt; (and lein as a whole, in
fact), into a separate classloader.  It then uses the same
&lt;a href=&quot;https://github.com/tobias/dynapath&quot;&gt;dynapath&lt;/a&gt; library used by pomegranate, to
add the resolved dependencies into your classpath.  This greatly cuts down the
chance of conflict, and will all but eliminate it if we can remove the &lt;code&gt;useful&lt;/code&gt;
dependency from classlojure.&lt;/p&gt;

&lt;p&gt;To use Alembic with nREPL or any other clojure REPL, you will need to add
Alembic to you development dependencies.  For a leiningen based project, you can
do this by adding it to the &lt;code&gt;:dependencies&lt;/code&gt; vector of the &lt;code&gt;:dev&lt;/code&gt; profile in
&lt;code&gt;project.clj&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;ss&quot;&gt;:profiles&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:dev&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:dependencies&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;alembic&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;0.1.0&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can enable Alembic on all you projects, by adding it to the &lt;code&gt;:dependencies&lt;/code&gt;
vector of the &lt;code&gt;:user&lt;/code&gt; profile in &lt;code&gt;~/.lein/profiles.clj&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The main function in alembic today is &lt;code&gt;distill&lt;/code&gt;, which adds a dependency to your
classpath.  For example, to add &lt;code&gt;tools.logging&lt;/code&gt;, you would call &lt;code&gt;distill&lt;/code&gt; like
this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;alembic.still&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;alembic.still/distill&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;org.clojure/tools.logging&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;0.2.0&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Transitive dependencies are of course added as well, which brings up the
possibility of version conflicts.  Alembic will not add any new version of a
dependency if it is already on the classpath, and will warn about the possible
version conflict.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;dependencies-added&lt;/code&gt; function can be used to retrieve a sequence of the
dependencies you have added, so you can add them to your &lt;code&gt;project.clj&lt;/code&gt; as
needed.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/pallet/alembic&quot;&gt;Alembic&lt;/a&gt; is in its infancy.  Having lein
running in a classloader, off to the side as it were, will probably enable lots
more goodies.  Look forward to your comments and suggestions, either in the
project&amp;#39;s &lt;a href=&quot;https://github.com/pallet/alembic&quot;&gt;issues&lt;/a&gt;, or on the
&lt;a href=&quot;https://groups.google.com/forum/?fromgroups#!forum/clojure-tools&quot;&gt;clojure-tools&lt;/a&gt;
google group.&lt;/p&gt;
</content>
   <author>
     <name>Hugo Duncan</name>
     <uri></uri>
   </author>
 </entry>
 
 <entry>
   <title>Article: Pallet training scheduled for March 14 and 15 at the Clojure/West Conference</title>
   <link href="http://palletops.com//pallet-training-scheduled-for-march-14-15-at"/>
   <updated>2011-12-13T00:00:00+00:00</updated>
   <id>http://palletops.com//pallet-training-scheduled-for-march-14-15-at</id>
   <content type="html">&lt;div class=&quot;row&quot;&gt;
  &lt;div class=&quot;span9 offset1&quot;&gt;
    &lt;div class=&quot;alert-message block-message error&quot;&gt;
      &lt;p&gt;The Pallet Workshop at Clojure/West was cancelled. We
      continue to offer on-site training. 
        &lt;a href=&quot;mailto:contact@palletops.com&quot;&gt;Contact us&lt;/a&gt; if you are
          interested. &lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;http://www.regonline.com/Register/Checkin.aspx?EventID=1041359&quot;&gt;Registration is now open!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We are very excited to announce that Clojure/West will be hosting a 2-day Pallet training session on March 14-15 with both Hugo Duncan and Toni Batchelli as instructors.&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://clojurewest.org/&quot;&gt;Clojure/West&lt;/a&gt; will be held in San Jose on March 16-17 and &lt;a href=&quot;http://clojurewest.org/&quot;&gt;registration for the conference&lt;/a&gt; is also open. Make sure you book your hotel rooms soon for an exceptional discount.&lt;/p&gt;

&lt;p&gt;Below is the &lt;a href=&quot;http://clojurewest.squarespace.com/training-pallet/&quot;&gt;official announcement&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;color: #626262; font-family: 'Lucida Sans Unicode', 'Lucida Grande', Tahoma, sans-serif; font-size: 12px; line-height: 21px;&quot;&gt; &lt;/span&gt;&lt;/p&gt;

&lt;p style=&quot;margin-bottom: 1em; margin-top: 0em;&quot;&gt;&lt;strong&gt;Cost:&amp;nbsp;&lt;/strong&gt;$1200 (&lt;a href=&quot;http://www.regonline.com/Register/Checkin.aspx?EventID=1041359&quot;&gt; &lt;strong&gt;Sign up before Jan 27th and get $200 off!&lt;/strong&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;p style=&quot;margin-bottom: 1em; margin-top: 0em;&quot;&gt;Included: breakfast, lunch, breaks, power, wifi&lt;/p&gt;

&lt;p style=&quot;margin-bottom: 1em; margin-top: 0em;&quot;&gt;&lt;strong&gt;Dates:&lt;/strong&gt;&lt;/p&gt;

&lt;ul style=&quot;list-style-type: square; margin-top: 1em; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 2em;&quot;&gt;
&lt;li&gt;&lt;a href=&quot;http://www.regonline.com/Register/Checkin.aspx?EventID=1041359&quot;&gt;Wed Mar 14 - Thu Mar 15, 2012&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p style=&quot;margin-bottom: 1em; margin-top: 0em;&quot;&gt;&lt;strong&gt;Instructors:&lt;/strong&gt;&amp;nbsp;Hugo Duncan, Antoni Batchelli&lt;/p&gt;

&lt;p style=&quot;margin-bottom: 1em; margin-top: 0em;&quot;&gt;&amp;nbsp;&lt;/p&gt;

&lt;p style=&quot;margin-bottom: 1em; margin-top: 0em;&quot;&gt;&lt;strong&gt;Prerequisites:&lt;/strong&gt;&lt;/p&gt;

&lt;div&gt;
&lt;ul style=&quot;list-style-type: square; margin-top: 1em; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 2em;&quot;&gt;
&lt;li&gt;Basic knowledge of Clojure is assumed (this class will not teach Clojure)&lt;/li&gt;
&lt;li&gt;Comfortable with installing and building open-source software.&lt;/li&gt;
&lt;li&gt;Knowledge of configuration management systems is not assumed.&lt;/li&gt;
&lt;li&gt;Bring your own laptop (computers are not provided).&lt;/li&gt;
&lt;li&gt;You should have the following software installed prior to the class:      
&lt;ul style=&quot;list-style-type: square; margin-top: 1em; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 2em;&quot;&gt;
&lt;li&gt;Clojure 1.3&lt;/li&gt;
&lt;li&gt;Preferred editor set up for Clojure&lt;/li&gt;
&lt;li&gt;Leiningen&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p style=&quot;margin-bottom: 1em; margin-top: 0em;&quot;&gt;&lt;strong&gt;Course Description:&lt;/strong&gt;&lt;/p&gt;

&lt;p style=&quot;margin-bottom: 1em; margin-top: 0em;&quot;&gt;Learn to use Pallet from the library's primary developers.&lt;/p&gt;

&lt;p style=&quot;margin-bottom: 1em; margin-top: 0em;&quot;&gt;If you care about building infrastructure as code, for deployment&amp;nbsp;locally on fixed infrastructure or to public and private clouds, then&amp;nbsp;Pallet is the tool for you.&lt;/p&gt;

&lt;p style=&quot;margin-bottom: 1em; margin-top: 0em;&quot;&gt;Pallet is a library for building infrastructure automation. Built on many of the principles of Clojure, Pallet uses functional programming techniques, such as composition, to support creating high level abstractions over different cloud providers, OS distros and versions,&amp;nbsp;package managers and tasks. Using Pallet, you will code your infrastructure to directly express the components of your system, so that it can managed and scaled easily across OSs and cloud providers.&lt;/p&gt;

&lt;p style=&quot;margin-bottom: 1em; margin-top: 0em;&quot;&gt;Pallet lets you:&lt;/p&gt;

&lt;ul style=&quot;list-style-type: square; margin-top: 1em; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 2em;&quot;&gt;
&lt;li&gt;Apply all your software development skills to managing your infrastructure.&lt;/li&gt;
&lt;li&gt;Write re-usable infrastructure components, that can be used from development&amp;nbsp;through to production, on local virtual machines, or on the cloud.&lt;/li&gt;
&lt;li&gt;Make infrastructure and deployment an integral part of your applications.&lt;/li&gt;
&lt;li&gt;Eliminate the low level work of maintaining the connections between the&amp;nbsp;servers in your architecture by leveraging Pallet's first class support for&amp;nbsp;discovering connection details at configuration time.&lt;/li&gt;
&lt;/ul&gt;

&lt;p style=&quot;margin-bottom: 1em; margin-top: 0em;&quot;&gt;What will you learn?&lt;/p&gt;

&lt;p style=&quot;margin-bottom: 1em; margin-top: 0em;&quot;&gt;How to code your infrastructure in Pallet. The course will be hands-on. You will learn Pallet by starting and configuring virtual machines, on a real cloud, implementing some common components.&lt;/p&gt;

&lt;p style=&quot;margin-bottom: 1em; margin-top: 0em;&quot;&gt;Topics:&lt;/p&gt;

&lt;ul style=&quot;list-style-type: square; margin-top: 1em; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 2em;&quot;&gt;
&lt;li&gt;Functional infrastructure: Learn how stateful infrastructure can be built&amp;nbsp;using pure functional programming.&lt;/li&gt;
&lt;li&gt;Actions: Pallet's actions provide a rich library of functions that form a&amp;nbsp;language used to write code that will run on remote machines. Actions are&amp;nbsp;designed to work across the whole range of operating systems supported by&amp;nbsp;Pallet, giving you freedom to move between operating systems and versions.&lt;/li&gt;
&lt;li&gt;Crates: Build high level abstractions by writing crates, which are clojure&amp;nbsp;functions that call any mixture of actions or other crate functions. &amp;nbsp;You&amp;nbsp;are familiar with building abstractions using functions in Clojure, and the&amp;nbsp;same techniques are used when you write crates in Pallet.&lt;/li&gt;
&lt;li&gt;Phases: when configuring and running your infrastructure, there will be many&amp;nbsp;operations you will wish to automate. &amp;nbsp;We'll show you how Pallet's phases&amp;nbsp;provide an open framework for you to automate as many tasks as you need,&amp;nbsp;while taking full advantage of the composability of pallet.&lt;/li&gt;
&lt;li&gt;Servers and groups: server-spec's in Pallet provide a mechanism for directly&amp;nbsp;describing the configuration and operation of (software) server components&amp;nbsp;in your architecture. group-spec's allow you to map the server-spec's to&amp;nbsp;individual nodes. Using server-spec's, you will see how to code your&amp;nbsp;infrastructure on a single vm, and then use the same server-spec's to deploy&amp;nbsp;to a horizontally scaled cloud environment.&lt;/li&gt;
&lt;li&gt;Stevedore: For some special cases, Pallet's actions may be too restrictive,&amp;nbsp;and for these cases Pallet allows you to write script using clojure,&amp;nbsp;enabling the use of all the rich data available about you infrastructure in&amp;nbsp;arbitrary scripts.&lt;/li&gt;
&lt;li&gt;Upcoming: Review the driving forces behind enhancements that will be coming&amp;nbsp;to Pallet, and discuss how these will benefit you.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;
</content>
   <author>
     <name>Antoni Batchelli</name>
     <uri></uri>
   </author>
 </entry>
 
 <entry>
   <title>Article: Pallet meetup at Clojure/Conj</title>
   <link href="http://palletops.com//pallet-meetup-at-clojureconj"/>
   <updated>2011-10-23T00:00:00+00:00</updated>
   <id>http://palletops.com//pallet-meetup-at-clojureconj</id>
   <content type="html">&lt;p&gt;We are trying to get together with all the Pallet users and lurkers that exist in the Clojure community a the &lt;a href=&quot;http://clojure-conj.org/&quot;&gt;Clojure/Conj&lt;/a&gt; this November. We still don't know the details on where and at what date/time we'll be able to meet, but we will meet for sure.&lt;/p&gt;
&lt;p&gt;We've setup a &lt;a href=&quot;http://www.meetup.com/Pallet-Users-Group/events/38415062/&quot;&gt;Pallet Users Meetup&lt;/a&gt; to register RSVPs and also to communicate the specifics of this meetup once they're settled.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;We're looking forward meeting you all!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.meetup.com/Pallet-Users-Group/events/38415062/&quot;&gt;Please RSVP&lt;/a&gt; so we know you're interested and we can plan accordingly!&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
</content>
   <author>
     <name>Antoni Batchelli</name>
     <uri></uri>
   </author>
 </entry>
 
 <entry>
   <title>Article: Create Hadoop clusters the easy peasy way with Pallet</title>
   <link href="http://palletops.com//create-hadoop-clusters-the-easy-peasy-way-wit"/>
   <updated>2011-07-28T00:00:00+00:00</updated>
   <id>http://palletops.com//create-hadoop-clusters-the-easy-peasy-way-wit</id>
   <content type="html">&lt;p&gt;Setting up a Hadoop cluster
&lt;a href=&quot;http://hadoop.apache.org/common/docs/current/cluster_setup.html&quot;&gt;is usually a pretty involved task&lt;/a&gt;.
There are certain rules about how the cluster is to be
configured. These rules need to be followed strictly for the cluster
to work. For example, some nodes need to know how to talk to the other
nodes, and some nodes need to allow other nodes to talk to them. Go
ahead and check out the
&lt;a href=&quot;http://hadoop.apache.org/common/docs/current/cluster_setup.html&quot;&gt;official instructions&lt;/a&gt;,
or this more detailed tutorial on
&lt;a href=&quot;http://www.michael-noll.com/tutorials/running-hadoop-on-ubuntu-linux-multi-node-cluster/&quot;&gt;setting up multi-node Hadoop clusters&lt;/a&gt;. In
this article we describe a solution that will create a fully
functional hadoop cluster on any public cloud with very few steps, and
in a very flexible way.&lt;/p&gt;

&lt;p&gt;We present &lt;a href=&quot;https://github.com/pallet/pallet-hadoop&quot;&gt;&lt;code&gt;pallet-hadoop&lt;/code&gt;&lt;/a&gt;,
a library that builds a set of hadoop abstractions on top
&lt;a href=&quot;https://github.com/pallet/pallet&quot;&gt;&lt;code&gt;Pallet&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One of the most defining aspects of &lt;code&gt;Pallet&lt;/code&gt; is that it is a library,
not a service, and hence there is no server to install in your
network, just something that you embed in your code or use in your
scripts. Also, as a library, Pallet provides a set of abstractions to
make it easier for you to build cluster configurations on top of
it. These two aspects of Pallet are what has allowed us to provide a
solution to tame Hadoop cluster setups.&lt;/p&gt;

&lt;p&gt;This work is a collaboration effort by
&lt;a href=&quot;https://github.com/sritchie&quot;&gt;Sam Ritchie (@sritchie09)&lt;/a&gt;, who provided
tons of Hadoop insight and did most of the work on &lt;code&gt;pallet-hadoop&lt;/code&gt;, and the
&lt;a href=&quot;https://github.com/pallet&quot;&gt;Pallet Team (@palletops)&lt;/a&gt;, that provided
the &lt;code&gt;Hadoop Crate&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Before we get into the details of how &lt;code&gt;pallet-hadoop&lt;/code&gt; is implemented,
let&amp;#39;s see how it works, by using the project
&lt;a href=&quot;https://github.com/pallet/pallet-hadoop-example&quot;&gt;&lt;code&gt;pallet-hadoop-example&lt;/code&gt;&lt;/a&gt;
in GitHub.&lt;/p&gt;

&lt;h2&gt;Build a Hadoop Cluster with Pallet-hadoop-example&lt;/h2&gt;

&lt;p&gt;To start a hadoop cluster we will use a project called
&lt;a href=&quot;https://github.com/pallet/pallet-hadoop-example&quot;&gt;&lt;code&gt;pallet-hadoop-example&lt;/code&gt;&lt;/a&gt;
that&amp;#39;s hosted on github. That project&amp;#39;s &lt;code&gt;README.md&lt;/code&gt; file contains
&lt;a href=&quot;https://github.com/pallet/pallet-hadoop-example&quot;&gt;very detailed instructions&lt;/a&gt;, which I&amp;#39;ll summarize here.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;First we load pallet and pallet-hadoop at the REPL:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;``` clojure
(use &amp;#39;pallet-hadoop-example.core) (bootstrap)
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Then we need to provide the credentials for pallet to connect to
EC2 (or any other cloud provider, really). You will need to have your
EC2 credentials available for this (how you identify yourself to the
cloud provider varies from provider to provider):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;``` clojure
user=&amp;gt;; (def cloud-service
           (compute-service &amp;quot;aws-ec2&amp;quot;
                            :identity &amp;quot;&amp;quot;         
                            :credential &amp;quot;&amp;quot;))
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next we create a cluster. &lt;code&gt;pallet-hadoop-examples&lt;/code&gt; provides a handy
function for this, which takes two parameters, the number of task
tracker nodes (slaves) and the memory devoted to each machine in the
cluster. The following will define a hadoop cluster with 2 &lt;code&gt;slave&lt;/code&gt;
nodes and one &lt;code&gt;master&lt;/code&gt; node (To keep things simple, the &lt;code&gt;master&lt;/code&gt; node
of our example cluster will serve double duty as
&lt;a href=&quot;http://wiki.apache.org/hadoop/JobTracker&quot;&gt;&lt;code&gt;jobtracker&lt;/code&gt;&lt;/a&gt; and
&lt;a href=&quot;http://wiki.apache.org/hadoop/NameNode&quot;&gt;&lt;code&gt;namenode&lt;/code&gt;&lt;/a&gt;, while our
&lt;code&gt;slave&lt;/code&gt; nodes will act as both
&lt;a href=&quot;http://wiki.apache.org/hadoop/TaskTracker&quot;&gt;&lt;code&gt;tasktrackers&lt;/code&gt;&lt;/a&gt; and
&lt;a href=&quot;http://wiki.apache.org/hadoop/DataNode&quot;&gt;&lt;code&gt;datanodes&lt;/code&gt;&lt;/a&gt;. These are the
four hadoop &lt;code&gt;roles&lt;/code&gt; currently supported by &lt;code&gt;pallet-hadoop&lt;/code&gt;.)&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;``` clojure
user=&amp;gt; (def my-cluster (make-example-cluster 2 (* 4 1024)))
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now we are ready to instantiate our cluster on the cloud. For this
we just need to do:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;``` clojure
user=&amp;gt; (create-cluster my-cluster cloud-service)
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And wait for it to come back.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;At this point, the cluster is all configured, and we should be able
to ssh into the jobtracker node. To find the IP address of the
jobtacker we can do the following:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;``` clojure
user=&amp;gt; (jobtracker-ip cloud-service)
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There you go! You now have a fully functional hadoop cluster all set
up. To operate it, once you ssh into jobtracker, you just need to you
need to sudo as hadoop (&lt;code&gt;sudo su - hadoop&lt;/code&gt;). The hadoop binaries are
found in &lt;code&gt;/usr/local/hadoop-0.20.2/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;(To run your first MapReduce job on the cluster, see the &amp;quot;Running Word Count&amp;quot; section of &lt;a href=&quot;https://github.com/pallet/pallet-hadoop-example&quot;&gt;&lt;code&gt;pallet-hadoop-example&lt;/code&gt; &lt;code&gt;README&lt;/code&gt;&lt;/a&gt;.)&lt;/p&gt;

&lt;h2&gt;Pallet-hadoop&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/pallet/pallet-hadoop&quot;&gt;&lt;code&gt;Pallet-hadoop&lt;/code&gt;&lt;/a&gt; is a library
built on top of pallet. Pallet provides a
&lt;a href=&quot;https://github.com/pallet/pallet-apache-crates/blob/master/hadoop/src/pallet/crate/hadoop.clj&quot;&gt;&lt;code&gt;hadoop-crate&lt;/code&gt;&lt;/a&gt;
that takes care of the low level operation of hadoop: install it,
create the hadoop user with a preconfigured profile, create ssh
authorizations between nodes, write configuration files from a data
map, etc.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Pallet-hadoop&lt;/code&gt; builds a set of abstractions on top of &lt;code&gt;pallet&lt;/code&gt; and
the hadoop crate.&lt;/p&gt;

&lt;p&gt;First, for each type of node, it defines what configuration phases
should be run for each role that a node plays. A node can play more
than one role at the same time, as we&amp;#39;ll see later.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;``` clojure
(def role-&amp;gt;phase-map
{:default #{:bootstrap
            :reinstall
            :configure
            :reconfigure
            :authorize-jobtracker}
 :namenode #{:start-namenode}
 :datanode #{:start-hdfs}
 :jobtracker #{:publish-ssh-key :start-jobtracker}
 :tasktracker #{:start-mapred}})
 ```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For example, &lt;code&gt;jobtracker&lt;/code&gt; is just like any other node, but
it creates and publishes its own public ssh key so that other nodes
can authorize it. This way, &lt;code&gt;jobtracker&lt;/code&gt; can ssh to all the other
nodes (a requirement for a functioning hadoop cluster).&lt;/p&gt;

&lt;p&gt;By default, each node bootstraps (setting basic configuration, e.g.
authorizing your own public ssh keys so you can ssh into each of the
nodes directly), installs and configures hadoop, and authorizes the
jobtracker.&lt;/p&gt;

&lt;p&gt;Next it defines what will be done for each phase:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;``` clojure
(defn hadoop-phases
  &amp;quot;Returns a map of all possible hadoop phases. IP-type specifies...&amp;quot;
  [{:keys [nodedefs ip-type]} properties]
  (let [[jt-tag nn-tag] 
                (roles-&amp;gt;tags [:jobtracker :namenode] nodedefs)
        configure (phase
                   (h/configure ip-type nn-tag jt-tag properties))]
    {:bootstrap automated-admin-user
     :configure (phase (java :jdk)
                       (h/install :cloudera)
                       configure)
     :reinstall (phase (h/install :cloudera)
                       configure)
     :reconfigure configure
     :publish-ssh-key h/publish-ssh-key
     :authorize-jobtracker (phase (h/authorize-tag jt-tag))
     :start-mapred h/task-tracker
     :start-hdfs h/data-node
     :start-jobtracker h/job-tracker
     :start-namenode (phase (h/name-node &amp;quot;/tmp/node-name/data&amp;quot;))}))
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;These phases usually use the &lt;code&gt;hadoop crate&lt;/code&gt; along with other crates in
&lt;code&gt;pallet&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next, it defines a function to create a &lt;code&gt;hadoop cluster spec&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;``` clojure
(defn cluster-spec
  &amp;quot;Generates a data representation of a hadoop cluster.

    ip-type: `:public` or `:private`. (Hadoop keeps track of
  jobtracker and namenode identity via IP address. This option toggles
  the type of IP address used. (EC2 requires `:private`, while a local
  cluster running on virtual machines will require `:public`.&amp;quot;
  [ip-type nodedefs &amp;amp;amp; {:as options}]
  {:pre [(#{:public :private} ip-type)]}
  (merge {:base-machine-spec {}
          :base-props {}}
         options
         {:ip-type ip-type
          :nodedefs nodedefs}))
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A cluster spec can take the following form:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;``` clojure                     
(cluster-spec 
    :private
     {:jobtracker (node-group [:jobtracker :namenode])
      :slaves     (slave-group 10)}
     :base-machine-spec {:os-family :ubuntu
                         :os-version-matches &amp;quot;10.10&amp;quot;
                         :os-64-bit true
                         :min-ram (* 4 1024)}
     :base-props {:hdfs-site 
                   {:dfs.data.dir &amp;quot;/mnt/dfs/data&amp;quot;
                    :dfs.name.dir &amp;quot;/mnt/dfs/name&amp;quot;}
                  :mapred-site
                   {:mapred.local.dir &amp;quot;/mnt/hadoop/mapred/local&amp;quot;
                    :mapred.task.timeout 300000
                    :mapred.reduce.tasks 3
                    :mapred.tasktracker.map.tasks.maximum 3
                    :mapred.tasktracker.reduce.tasks.maximum 3
                    :mapred.child.java.opts &amp;quot;-Xms1024m&amp;quot;}})                         
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this example, we&amp;#39;re defining a hadoop cluster that will use private
IP addresses for its communication, that will have two types of nodes:
a &lt;code&gt;jobtracker&lt;/code&gt; node and &lt;code&gt;slave&lt;/code&gt; nodes. &lt;code&gt;jobtracker&lt;/code&gt; nodes will play
the roles of both &lt;code&gt;jobtracker&lt;/code&gt; and &lt;code&gt;namenode&lt;/code&gt;, while a &lt;code&gt;slave&lt;/code&gt; will be
both a &lt;code&gt;datanode&lt;/code&gt; and a &lt;code&gt;tasktracker&lt;/code&gt;. There will be 10 slaves in this cluster.&lt;/p&gt;

&lt;p&gt;Next, &lt;code&gt;:base-machine-spec&lt;/code&gt; specifies on what type of hardware will be
used for all the nodes. This specifies a 64bit machine with 4GB of
RAM, running &lt;code&gt;Ubuntu 10.10&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;:base-props&lt;/code&gt; provides the shared properties that we want to
customize. These are divided between &lt;code&gt;HDFS&lt;/code&gt; properties (&lt;code&gt;:hdfs-site&lt;/code&gt;)
and &lt;code&gt;MapReduce&lt;/code&gt; properties (&lt;code&gt;:mapred-site&lt;/code&gt;). These properties should
be self-explanatory.&lt;/p&gt;

&lt;p&gt;Here are the full lists of options for
&lt;a href=&quot;http://hadoop.apache.org/core/docs/r0.20.0/mapred-default.html&quot;&gt;mapred&lt;/a&gt;,
&lt;a href=&quot;http://hadoop.apache.org/core/docs/r0.20.0/hdfs-default.html&quot;&gt;hdfs&lt;/a&gt;
and
&lt;a href=&quot;http://hadoop.apache.org/core/docs/r0.20.0/core-default.html&quot;&gt;core&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Future&lt;/h2&gt;

&lt;p&gt;This work simplifies significantly the task of setting up a Hadoop
cluster, but also this is very much work in progress and we already
have plenty of ideas on how to provide the best Hadoop experience.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Help us get there&lt;/strong&gt; by sharing this post (see widgets
below) and by telling us about your use cases or any advice you think
would make this project rock even more, either by dropping by the #pallet
channel at &lt;a href=&quot;http://freenode.net/irc_servers.shtml&quot;&gt;freenode.net&lt;/a&gt;, or
by emailing the &lt;a href=&quot;mailto:pallet-clj@googlegroups.com&quot;&gt;&lt;code&gt;pallet&lt;/code&gt; list&lt;/a&gt;  .  &lt;/p&gt;
</content>
   <author>
     <name>Antoni Batchelli</name>
     <uri></uri>
   </author>
 </entry>
 
 <entry>
   <title>Article: Zi, the Maven plugin in Clojure</title>
   <link href="http://palletops.com//zi-the-maven-plugin-in-clojure"/>
   <updated>2011-07-15T00:00:00+00:00</updated>
   <id>http://palletops.com//zi-the-maven-plugin-in-clojure</id>
   <content type="html">&lt;p&gt;YACMP doesn&amp;#39;t trip off the tongue, so this clojure maven plugin is called &lt;a href=&quot;http://bit.ly/zicljpops&quot;&gt;Zi&lt;/a&gt;, and it&amp;#39;s written in clojure. Some highlights:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;lein style checkout projects -- develop your project&amp;#39;s dependencies without repackaging them&lt;/li&gt;
&lt;li&gt;no forking -- goals run in the maven process&lt;/li&gt;
&lt;li&gt;can be installed globally -- some goals run without adding the plugin to the pom&lt;/li&gt;
&lt;li&gt;written (mainly) in clojure -- can use all of clojure&amp;#39;s expressive power and libraries&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Why another maven plugin for clojure?&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/technomancy/leiningen&quot;&gt;leiningen&lt;/a&gt; and &lt;a href=&quot;https://github.com/flatland/cake&quot;&gt;cake&lt;/a&gt; are both great tools for an ever expanding set of use cases, but there are still many reasons to fall back on maven.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.talios.com&quot;&gt;Mark&lt;/a&gt; has done a fantastic job with &lt;a href=&quot;https://github.com/talios/clojure-maven-plugin&quot;&gt;clojure-maven-plugin&lt;/a&gt;, but it feels wrong coding in java to work with clojure code, and using clojure brings all of clojure&amp;#39;s libraries within easy reach. Zi also works a little differently to clojure-maven-plugin.&lt;/p&gt;

&lt;h2&gt;What&amp;#39;s different&lt;/h2&gt;

&lt;p&gt;The goals use a non-forked execution model -- they are executed within the maven process itself, which should make it faster.&lt;/p&gt;

&lt;p&gt;The clojure compiler is available as a compiler plugin for maven-compiler-plugin (see Zi&amp;#39;s pom for an example of this).  The &lt;code&gt;compile&lt;/code&gt; goal in Zi just extends maven-compiler-plugin to set the default language to clojure.  It inherits the inclusion and exclusion mechanism, as well as the detection of out of date target files.&lt;/p&gt;

&lt;p&gt;The plugin is designed to be &amp;#39;fat&amp;#39;, in that it comes with dependencies on &lt;a href=&quot;http://bit.ly/ritzpops&quot;&gt;ritz&lt;/a&gt;, &lt;a href=&quot;https://github.com/technomancy/swank-clojure&quot;&gt;swank-clojure&lt;/a&gt;, &lt;a href=&quot;https://github.com/fogus/marginalia&quot;&gt;marginalia&lt;/a&gt;, etc, so the plugin can be installed globally and used against an maven based clojure project without explicitly adding zi as a plugin.&lt;/p&gt;

&lt;p&gt;It doesn&amp;#39;t have all the bells and whistles of clojure-maven-plugin yet, but it does have support for leiningen style checkouts.&lt;/p&gt;

&lt;p&gt;Lein style checkouts allow you to develop your project&amp;#39;s dependencies without having to re-jar them after each modification -- just symlink your lein projects in a project level &lt;code&gt;checkouts&lt;/code&gt; directory.  Support for maven based projects in &lt;code&gt;checkouts&lt;/code&gt; is pending release of maven 3.0.4.&lt;/p&gt;

&lt;h2&gt;So how do I use it?&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;http://bit.ly/zicljpops&quot;&gt;Zi readme&lt;/a&gt; has the details, bit here is an overview:&lt;/p&gt;

&lt;p&gt;The plugin uses the &lt;code&gt;sourceDirectory&lt;/code&gt; element from the &lt;code&gt;pom.xml&lt;/code&gt;, and automatically translates any &lt;code&gt;/java&lt;/code&gt; suffix to &lt;code&gt;/clojure&lt;/code&gt;, which means it uses &lt;code&gt;src/main/clojure&lt;/code&gt; by default.&lt;/p&gt;

&lt;p&gt;To copy clojure source files to the output target directory, add the zi plugin, and add an execution for the &lt;code&gt;resource&lt;/code&gt; goal.&lt;/p&gt;

&lt;p&gt;To AOT compile, add an execution for the &lt;code&gt;compile&lt;/code&gt; goal.&lt;/p&gt;

&lt;p&gt;To start a &lt;a href=&quot;http://bit.ly/ritzpops&quot;&gt;ritz&lt;/a&gt; server, &lt;code&gt;mvn zi:ritz&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To start a &lt;a href=&quot;https://github.com/technomancy/swank-clojure&quot;&gt;swank-clojure&lt;/a&gt; server, &lt;code&gt;mvn zi:swank-clojure&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To generate &lt;a href=&quot;https://github.com/fogus/marginalia&quot;&gt;marginalia&lt;/a&gt; documentation, &lt;code&gt;mvn zi:marginalia&lt;/code&gt;&lt;/p&gt;
</content>
   <author>
     <name>Hugo Duncan</name>
     <uri></uri>
   </author>
 </entry>
 
 <entry>
   <title>Article: Pallet 0.4.10 -  environments, parallel lift and converge, and virtualbox too!</title>
   <link href="http://palletops.com//pallet-0410-environments-parallel-lift-and-co"/>
   <updated>2011-03-14T00:00:00+00:00</updated>
   <id>http://palletops.com//pallet-0410-environments-parallel-lift-and-co</id>
   <content type="html">&lt;p&gt;This week saw the release of 0.4.10.&lt;/p&gt;

&lt;p&gt;The pace of pallet development has picked up over the last couple of months.
Much of this has been driven by
&lt;a href=&quot;http://blog.gogrid.com/2011/02/08/agile-development-at-gogrid-with-pallet-and-jclouds-presentation/&quot;&gt;our work at GoGrid&lt;/a&gt;,
where we are applying pallet to automate fully functional GoGrid environments
for use by development teams for test and development. Thanks
&lt;a href=&quot;htp://gogrid.com&quot;&gt;GoGrid&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;The 0.4.x cycle has seen us switch to gitflow and to frequent releases to avoid
dependence on SNAPSHOTS. Personally, this has made development much more
enjoyable - hopefully it makes life easier for users of pallet too.&lt;/p&gt;

&lt;h2&gt;0.4.10 Release&lt;/h2&gt;

&lt;p&gt;Major changes since 0.4.0 include parallel converges and lifts, support for
vmfest, and environments.&lt;/p&gt;

&lt;p&gt;Parallel converge ensures that the wait when starting nodes is minimised,
executing requests for all nodes to be created in parallel. Parallel lift
applies each phase across all nodes in parallel. Phases still run sequentially
(running each phase waits for all nodes to complete the previous
phase). Parallel converge and lift are not the default yet, but will be in
0.5.0.&lt;/p&gt;

&lt;p&gt;To try out parallel lift and converge, add the following to your config.clj:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;``` clojure
:environment {:algorithms
              {:lift-fn 
                 pallet.core/parallel-lift
               :converge-fn 
                 pallet.core/parallel-adjust-node-counts}}
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Which brings us to environments. Environments are a powerful way of injecting
data into your crates, and provide a customisation mechanism, as seen above.  An
:environment can be specified at the top level of the defpallet in config.clj,
or at the individual service provider level (same level as :provider), or in the
actual call to lift and converge. As an example use case, here is the
environment I use for running live tests in virtualbox via vmfest:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;``` clojure
:environment
  {:phases
    {:bootstrap (fn [request]
                  (pallet.resource.package/package-manager
                     request :configure
                     :proxy &amp;quot;http://192.168.1.37:3128&amp;quot;))}
   :proxy &amp;quot;http://192.168.1.37:3128&amp;quot;
   :mirror {:apache &amp;quot;http://apache.mirror.iweb.ca/&amp;quot;}
   :image {:min-ram 256 :bridged-network &amp;quot;en1: AirPort&amp;quot;}}
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This example extends the bootstrap phase of all nodes to add a proxy for the
package manager, adds a proxy for remote-file operations, selects a mirror for
apache downloads, and specifies a default template for new nodes.&lt;/p&gt;

&lt;p&gt;To access arbitrary data from the environment, use pallet.environment/get-for.&lt;/p&gt;

&lt;p&gt;Finally, vmfest is Toni Batchelli&amp;#39;s great new lib for using VirtualBox from
clojure.  Toni is simplifying the setup before announcing this more generally,
but it works very well, and is now my default development and testing setup for
pallet. If you want to give it a try, give tbatchelli a shout on #pallet in
freenode IRC.  &lt;a href=&quot;https://github.com/tbatchelli/vmfest&quot;&gt;vmfest is on github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For full details, check the &lt;a href=&quot;https://github.com/pallet/pallet/wiki/ReleaseNotes&quot;&gt;release notes&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Upcoming&lt;/h2&gt;

&lt;p&gt;Expect a post with a more in depth example of using environements soon.  There
are some other interesting features in the pipeline, including the use of spot
instances on EC2 - stay tuned...&lt;/p&gt;
</content>
   <author>
     <name>Hugo Duncan</name>
     <uri></uri>
   </author>
 </entry>
 
 <entry>
   <title>Article: Working with Non-Cloud Servers in Pallet</title>
   <link href="http://palletops.com//working-with-non-cloud-servers-in-pallet"/>
   <updated>2010-12-06T00:00:00+00:00</updated>
   <id>http://palletops.com//working-with-non-cloud-servers-in-pallet</id>
   <content type="html">&lt;p&gt;If have tried to configure local vm&amp;#39;s or non-virtualised servers in
&lt;a href=&quot;http://palletops.com&quot;&gt;Pallet&lt;/a&gt;, you might well have given up. The recent
&lt;a href=&quot;http://palletops.com/pallet-release-030-agile-cloud-development&quot;&gt;0.3 release&lt;/a&gt;
has made working with existing servers much easier, however.&lt;/p&gt;

&lt;p&gt;Pallet now has a &lt;code&gt;node-list&lt;/code&gt; provider, which you can use to specify the tags and
address of the machine that you want to manage.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;``` clojure
(require &amp;#39;pallet.compute.node-list)
(def service 
  (pallet.compute/compute-service
    &amp;quot;node-list&amp;quot;
     :node-list [(pallet.compute.node-list/make-node
                   &amp;quot;hostname&amp;quot; &amp;quot;tag&amp;quot; &amp;quot;192.168.2.23&amp;quot; :ubuntu)])
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Use &lt;code&gt;defnode&lt;/code&gt; and &lt;code&gt;lift&lt;/code&gt; to configure the machines based on the tag.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;``` clojure
(require &amp;#39;pallet.core)
(pallet.core/defnode tag
  :configure (pallet.resource/phase
               (pallet.resource.package/package &amp;quot;wget&amp;quot;)))
(pallet.core/lift tag)
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Pallet has it&amp;#39;s roots in &lt;a href=&quot;http://jclouds.org/&quot;&gt;jclouds&lt;/a&gt;, and was originally
meant to work directly with a cloud provisioning api. Adding the abitility to
work with a fixed list of nodes was a simple case of wiring up a subset of
pallet&amp;#39;s capabilities. The &lt;code&gt;converge&lt;/code&gt; command has the capability of starting and
stopping nodes, and is obviously not supported by &lt;code&gt;node-list&lt;/code&gt;.&lt;/p&gt;
</content>
   <author>
     <name>Hugo Duncan</name>
     <uri></uri>
   </author>
 </entry>
 
 <entry>
   <title>Article: How to Configure your Credentials in Pallet</title>
   <link href="http://palletops.com//how-to-configure-your-cloud-credentials-in-pa"/>
   <updated>2010-11-18T00:00:00+00:00</updated>
   <id>http://palletops.com//how-to-configure-your-cloud-credentials-in-pa</id>
   <content type="html">&lt;p&gt;The recent
&lt;a href=&quot;http://palletops.com/pallet-release-030-agile-cloud-development&quot;&gt;0.3.0 release&lt;/a&gt;
of &lt;a href=&quot;https://github.com/hugoduncan/pallet&quot;&gt;pallet&lt;/a&gt; added a new way to configure
your cloud credentials, using a clojure file, &lt;code&gt;~/.pallet/config.clj&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;``` clojure
(defpallet
  :providers
    {:aws {:provider &amp;quot;ec2&amp;quot;
           :identity &amp;quot;key&amp;quot;
           :credential &amp;quot;secret-key&amp;quot;}
     :rs  {:provider &amp;quot;cloudservers&amp;quot;
           :identity &amp;quot;username&amp;quot;
           :credential &amp;quot;key&amp;quot;}})
 ```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The provider key, &lt;code&gt;:aws&lt;/code&gt; and &lt;code&gt;:rs&lt;/code&gt; above, has to be unqiue, but you can have
multiple accounts for the same provider. The provider string is the
&lt;a href=&quot;http://jclouds.org/&quot;&gt;jclouds&lt;/a&gt; provider string, and can be found with a call to
&lt;code&gt;pallet.compute/supported-providers&lt;/code&gt;, or using the lein plugin,
&lt;code&gt;pallet lein providers&lt;/code&gt; (in which case you can see if you have the appropriate
jclouds provider jars set up correctly).  Pallet uses jcloud&amp;#39;s terminology,
&lt;code&gt;identity&lt;/code&gt; and &lt;code&gt;credential&lt;/code&gt;, but your cloud provider will probably use different
terms for these.&lt;/p&gt;

&lt;p&gt;To create a compute service object from this file, that you can pass to &lt;code&gt;lift&lt;/code&gt;
or &lt;code&gt;converge&lt;/code&gt;, you use &lt;code&gt;pallet.compute/compute-service-from-config&lt;/code&gt;. By default,
the first provider entry will be used, and you can specify an alternative
provider by passing the key to the function.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;``` clojure
(pallet.compute/compute-service-from-config &amp;quot;rs&amp;quot;)
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;config.clj&lt;/code&gt; file is read automatically by the lein and cake plugins, and
in lein, you can switch between providers using the &lt;code&gt;-P&lt;/code&gt; command line option.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;``` bash
lein pallet -P rs nodes
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Admin User&lt;/h2&gt;

&lt;p&gt;At the same time, the &lt;code&gt;config.clj&lt;/code&gt; file can be used to set the admin user, that
is used by pallet to run the node configuration. By default in pallet, this is
set to your current username and uses your id_rsa key.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;``` clojure
(defpallet
  :admin-user
    {:username &amp;quot;admin&amp;quot;
     :private-key-path &amp;quot;/path/to/private-key&amp;quot;
     :public-key-path &amp;quot;/path/to/public-key&amp;quot;})
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Another possibility, which could be useful if you are working in a team
environment, is to set the admin user in the project code.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;``` clojure
(ns pallet.config
  (:require [pallet.utils :as utils]))

(def admin-user (utils/make-user &amp;quot;admin&amp;quot;))
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;settings.xml&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;config/clj&lt;/code&gt; file is an alternative to the existing &lt;code&gt;settings.xml&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;``` xml
&amp;lt;settings&amp;gt;
  &amp;lt;profiles&amp;gt;
    &amp;lt;profile&amp;gt;
      &amp;lt;id&amp;gt;rackspacedev&amp;lt;/id&amp;gt;
      &amp;lt;activation&amp;gt;
    &amp;lt;activeByDefault&amp;gt;false&amp;lt;/activeByDefault&amp;gt;
      &amp;lt;/activation&amp;gt;
      &amp;lt;properties&amp;gt;
        &amp;lt;jclouds.compute.provider&amp;gt;
          cloudservers
        &amp;lt;/jclouds.compute.provider&amp;gt;
        &amp;lt;jclouds.compute.identity&amp;gt;
          username
        &amp;lt;/jclouds.compute.identity&amp;gt;
        &amp;lt;jclouds.compute.credential&amp;gt;
          key
        &amp;lt;/jclouds.compute.credential&amp;gt;
      &amp;lt;/properties&amp;gt;
    &amp;lt;/profile&amp;gt;
    &amp;lt;profile&amp;gt;
      &amp;lt;id&amp;gt;aws&amp;lt;/id&amp;gt;
      &amp;lt;activation&amp;gt;
    &amp;lt;activeByDefault&amp;gt;true&amp;lt;/activeByDefault&amp;gt;
      &amp;lt;/activation&amp;gt;
      &amp;lt;properties&amp;gt;
        &amp;lt;jclouds.compute.provider&amp;gt;
          ec2
        &amp;lt;/jclouds.compute.provider&amp;gt;
        &amp;lt;jclouds.compute.identity&amp;gt;
          key
        &amp;lt;/jclouds.compute.identity&amp;gt;
        &amp;lt;jclouds.compute.credential&amp;gt;
          secret key
        &amp;lt;/jclouds.compute.credential&amp;gt;
      &amp;lt;/properties&amp;gt;
    &amp;lt;/profile&amp;gt;
  &amp;lt;/profiles&amp;gt;
&amp;lt;/settings&amp;gt;
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To create a compute service object from &lt;code&gt;settings.xml&lt;/code&gt;, you use
&lt;code&gt;pallet.compute/compute-service-from-settings&lt;/code&gt;. The default is determined by the
active profile. You can specify a different profile by passing the profile&amp;#39;s id
to the function.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;``` clojure
(pallet.compute/compute-service-from-settigs &amp;quot;rackspacedev&amp;quot;)
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
   <author>
     <name>Hugo Duncan</name>
     <uri></uri>
   </author>
 </entry>
 
 <entry>
   <title>Article: Pallet release 0.3.0</title>
   <link href="http://palletops.com//pallet-release-030-agile-cloud-development"/>
   <updated>2010-10-15T00:00:00+00:00</updated>
   <id>http://palletops.com//pallet-release-030-agile-cloud-development</id>
   <content type="html">&lt;p&gt;What better way to start this blog, than by announcing the latest release of &lt;a href=&quot;http://github.com/hugoduncan/pallet&quot;&gt;Pallet&lt;/a&gt;. Perhaps the biggest news around this release is that the pallet community is growing rapidly, and the 0.3.0 release has seen great input from many contributors. I really appreciate all the ideas and contributions!&lt;/p&gt;
&lt;p&gt;A particular shout out to David Santiago and Charles Duffy. David has contributed a new &lt;a href=&quot;https://github.com/hugoduncan/pallet/blob/pallet-0.3.0/src/pallet/crate/postgres.clj&quot;&gt;Postgres crate&lt;/a&gt;, and has put together a &lt;a href=&quot;http://github.com/davidsantiago/cake-pallet&quot;&gt;cake plugin&lt;/a&gt; for pallet. Charles has much improved the bash &lt;a href=&quot;https://github.com/hugoduncan/pallet/blob/pallet-0.3.0/resources/stevedore/hashlib.bash&quot;&gt;hashlib&lt;/a&gt; used to propogate state during lifts on a node.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://cemerick.com&quot;&gt;Chas Emerick&lt;/a&gt; has been promoting Pallet as part of his talk at the first &lt;a href=&quot;http://clojure-conj.org/&quot;&gt;clojure-conj&lt;/a&gt; conference, and followed that up with a &lt;a href=&quot;http://cemerick.com/2010/11/02/continuous-deployment-of-clojure-web-applications/&quot;&gt;blog post&lt;/a&gt; and &lt;a href=&quot;https://github.com/cemerick/clojure-web-deploy-conj&quot;&gt;project code&lt;/a&gt;.  The post has an fantastic screen cast on using pallet together with Hudson.&lt;/p&gt;
&lt;p&gt;Toni Batchelli (aka &lt;a href=&quot;http://disclojure.org/&quot;&gt;disclojure&lt;/a&gt;) has given a couple of talks: a &lt;a href=&quot;http://www.scribd.com/doc/39275742/Pallet-Bacug&quot;&gt;great technical introduction&lt;/a&gt;, and a &lt;a href=&quot;http://www.scribd.com/doc/40391319/Pallet-Gogrid&quot;&gt;slightly higher level overview&lt;/a&gt;. He has also vastly improved the &lt;a href=&quot;http://github.com/hugoduncan/pallet-examples&quot;&gt;pallet examples&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Finally, Adrian Cole of &lt;a href=&quot;http://jclouds.org&quot;&gt;jclouds&lt;/a&gt;, the foundation of pallet, has been lavish in his support, even giving a &lt;a href=&quot;http://oredev.org/2010/speakers/adrian-cole&quot;&gt;workshop on pallet&lt;/a&gt; at &lt;a href=&quot;http://oredev.org/2010&quot;&gt;&amp;Oslash;redev&lt;/a&gt; in Sweden!&lt;/p&gt;
&lt;h2&gt;What's new&lt;/h2&gt;
&lt;p&gt;Some highlights from the &lt;a href=&quot;https://github.com/hugoduncan/pallet/wiki/ReleaseNotes&quot;&gt;release notes&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Added ~/.pallet/config.clj as a way of configuring your credentials, and the default admin user. The admin user can also be configured in project code in the pallet.config namespace.&lt;/li&gt;
&lt;li&gt;Added a &quot;node-list&quot; provider, which simplifies working with pre-existing vms and servers that are not managed through a cloud.&lt;/li&gt;
&lt;li&gt;Added a tomcat task, that can provide a near zero config way of deploying a war file.&lt;/li&gt;
&lt;li&gt;cent-os and amzn-linux support are vastly improved.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Look out for more, in-depth, posts on the new features.&lt;/p&gt;
&lt;h2&gt;Looking ahead&lt;/h2&gt;
&lt;p&gt;One of the first things we will be doing in the 0.4.0-SNAPSHOT is splitting out the crates into a separate repository.  Hopefully this will be the first step in creating an ecosystem of pallet crates.  Stay tuned for further posts on this.&lt;/p&gt;
&lt;h2&gt;Trying it&lt;/h2&gt;
&lt;p&gt;The release is available on &lt;a href=&quot;http://clojars.org/org.cloudhoist/pallet&quot;&gt;clojars&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Both #pallet on freenode IRC, which is a bustling place these days, and the &lt;a href=&quot;http://groups.google.com/group/pallet-clj&quot;&gt;mailing list&lt;/a&gt; are great places to ask, should you have any questions.&lt;/p&gt;
</content>
   <author>
     <name>Hugo Duncan</name>
     <uri></uri>
   </author>
 </entry>
 
 <!-- news -->
 
 <entry>
   <title>News: Run clojure projects on Docker with lein-uberimage</title>
   <link href="http://palletops.com//blog/lein-uberimage"/>
   <updated>2014-08-07T00:00:00+00:00</updated>
   <id>http://palletops.com//blog/lein-uberimage</id>
   <content type="html">&lt;p&gt;We built a lein plugin to make it easy to run clojure projects in Docker containers. This article first introduces containers and Docker, and then shows how you can effortlessly create such containers for your Clojure projects with &lt;code&gt;lein uberimage&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;&lt;image src=&quot;/images/docker-large-h-trans.png&quot; alt=&quot;Docker logo&quot; class=&quot;img-responsive&quot;&gt;&lt;/p&gt;

&lt;h2&gt;Why Containers and Why Docker&lt;/h2&gt;

&lt;p&gt;A container is a lighweight form of computer virtualization. Containers run within a host, and a host can run many containers concurrently. Each container is functionally equivalent to a computer loaded with a full OS, but behind the scenes all containers in the same host are sharing the same host resources: kernel, memory, IO, and disk.&lt;/p&gt;

&lt;p&gt;There are many ways of virtualization technologies used today, VirtualBox, Xen (used by Amazon Web Services) and vmware to name a few, but what makes containers special is their lightweight nature. Each container uses very little resources (disk, memory, cpu) and they all boot orders of magnitude faster than a virtual machine or
a computer.&lt;/p&gt;

&lt;p&gt;Containers are very convenient for both development and production environments. For development, they provide a fast and simple way to run different and isolated runtime environments for each application. In production, they are very fast and efficient, with the added bonus that containers in production always match the ones in development; the same exact containers are used during all app&amp;#39;s lifecycle.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.docker.com&quot;&gt;Docker&lt;/a&gt; is a novel container technology for Linux that provides a very low friction access to containers. Containers have been around for a while, and the Linux kernel has provided key container technologies for a while already. Docker wraps all these kernel features under a high level API and defines a standard container and image formats using union filesystems. To make containers easy to share and distribute, Docker also provides public and private image repositories. All these features have brought containers to the masses.&lt;/p&gt;

&lt;p&gt;Although Docker is currently Linux only, you can use it on OSX installing &lt;a href=&quot;http://boot2docker.io&quot;&gt;boot2docker&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For a more detailed introduction to Docker, check out this video on &lt;a href=&quot;http://sysadmincasts.com/episodes/31-introduction-to-docker&quot;&gt;sysadmincasts.com&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Docker images&lt;/h2&gt;

&lt;p&gt;Each container is a process tree that is started from an existing image. These images contain a filesystem with the files necessary to run your application. Sometimes this entails a linux distribution and sometimes just one statically linked binary. The common practice in the Docker world is to build a custom image for each type of service you intend to run. This contrasts with other forms of virtualization where you start the VMs from a base image and then you configure them with the required software. In the case of VMs, the time it takes a VM to boot until it is ready to run your application is measured in minutes, whereas in Docker a container can boot in sub-second times.&lt;/p&gt;

&lt;h2&gt;Building Docker images with uberimage&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;lein-uberimage&lt;/code&gt; builds a Docker image for clojure projects. The generated images contain a base operating system, a java runtime, and your project&amp;#39;s &lt;code&gt;uberjar&lt;/code&gt;. Once this image is built, you can instantiate as many containers as you need using this image, each container running your &lt;code&gt;uberjar&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;At the time of writing this, &lt;code&gt;lein-uberimage&lt;/code&gt; requires that the project builds with &lt;code&gt;lein uberjar&lt;/code&gt; and that the resulting jar can be run via &lt;code&gt;java -jar &amp;lt;your-uberjar&amp;gt;.jar&lt;/code&gt;. This means your &lt;code&gt;project.clj&lt;/code&gt; will have to have a &lt;code&gt;:main&lt;/code&gt; entry pointing to the &lt;code&gt;-main&lt;/code&gt; function in your code. This restriction will be removed in the future.&lt;/p&gt;

&lt;p&gt;To build the Docker image for your project, run the following in your project&amp;#39;s root:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;lein uberimage
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;uberimage&lt;/code&gt; will call lein&amp;#39;s &lt;code&gt;uberjar&lt;/code&gt; to build the standalone jar file. Then it will build a new image with &lt;code&gt;Ubuntu 14.04&lt;/code&gt;, &lt;code&gt;OpenJDK 7&lt;/code&gt; and the freshly built jar. The image is also configured to run your jar file on boot. This task will return the &lt;code&gt;uuid&lt;/code&gt; for this image.&lt;/p&gt;

&lt;p&gt;From this image you just created, you can spawn as many containers as you need. The most basic way to start a container is this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &amp;lt;my-image-uuid&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In most cases, your app won&amp;#39;t be useful unless you can access it via known ports, and by default, Docker does not expose any ports of a container, so you need to tell Docker to expose those ports. Since you will be running many containers on the same host you need to ensure that not two containers are bound to the same port. For example, if your application listens on port 3000, you need to tell Docker to bind the container&amp;#39;s port 3000 to any unbound port in the host, e.g. 8080:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run -p 8080:3000 &amp;lt;my-image-uuid&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once the container has started, just head over to &lt;code&gt;http://&amp;lt;docker-host&amp;gt;:8080&lt;/code&gt; to access your newly deployed service. If you launch a second container with the same image, you cannot bind it to the same host port (8080 in this case) and you should instead map it to port 8081 &lt;code&gt;docker run -p 8081:3000 ...&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;Trying It Out&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.docker.com/installation/#installation&quot;&gt;Install&lt;/a&gt; Docker.&lt;/li&gt;
&lt;li&gt;Clone this &lt;a href=&quot;https://github.com/tbatchelli/compojure-example&quot;&gt;example clojure project&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;On the project root, run &lt;code&gt;lein uberimage&lt;/code&gt; and copy the supplied image uuid&lt;/li&gt;
&lt;li&gt;At the shell, run &lt;code&gt;docker run -d -p 3000:3000 &amp;lt;image-uuid&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Open the browser and head on to &lt;code&gt;http://&amp;lt;docker-host&amp;gt;:3000&lt;/code&gt;. Docker-host could be &lt;code&gt;localhost&lt;/code&gt; in case you are in linux, or the boot2docker IP address if you are using boot2docker.&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;docker run -d -p 3001:3000 &amp;lt;image-uuid&amp;gt;&lt;/code&gt; to run a second instance and check &lt;code&gt;http://&amp;lt;docker-host&amp;gt;:3001&lt;/code&gt; with your browser. Notice the different IP address.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Additional Options&lt;/h2&gt;

&lt;p&gt;In case the supplied OS and java versions are not what you&amp;#39;re looking for, you can supply your own base image to &lt;code&gt;lein-uberimage&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;lein uberimage -b &amp;lt;your-image-with-jvm&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And in case your Docker is not locally installed on the default port or it is remote, you can override its url:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;lein uberimage -H http://&amp;lt;host&amp;gt;:&amp;lt;port&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Concluding remarks&lt;/h2&gt;

&lt;p&gt;There is not much more to it for now. This is our first stab at helping clojurians leverage containers. Please submit bugs and ideas to our project&amp;#39;s &lt;a href=&quot;https://github.com/palletops/lein-uberimage/issues&quot;&gt;Issues&lt;/a&gt; or drop by our chatroom &lt;a href=&quot;http://webchat.freenode.net/?channels=pallet&quot;&gt;#pallet&lt;/a&gt; on freenode.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;lein-uberimage&lt;/code&gt; is build on top of &lt;a href=&quot;https://github.com/palletops/clj-docker.&quot;&gt;clj-docker&lt;/a&gt;, a clojure wrapper over docker.&lt;/p&gt;
</content>
   <author>
     <name>Antoni Batchelli</name>
     <uri></uri>
   </author>
 </entry>
 
 <entry>
   <title>News: Hugo Duncan talking about Pallet at EuroClojure 2012</title>
   <link href="http://palletops.com//news/Euroclojure-2012-Pallet-Talk/"/>
   <updated>2012-06-11T00:00:00+00:00</updated>
   <id>http://palletops.com//news/Euroclojure-2012-Pallet-Talk/</id>
   <content type="html">&lt;p&gt;Hugo Duncan gave a &lt;a href=&quot;http://vimeo.com/45562554&quot;&gt;talk on pallet basics&lt;/a&gt; at
&lt;a href=&quot;http://euroclojure.com/2012/&quot;&gt;EuroClojure 2012&lt;/a&gt;.&lt;/p&gt;
</content>
   <author>
     <name>Hugo Duncan</name>
     <uri></uri>
   </author>
 </entry>
 
 <entry>
   <title>News: Toni Batchelli talking about Pallet at Clojure/West 2012</title>
   <link href="http://palletops.com//news/Clojure-West-2012-Pallet-Talk/"/>
   <updated>2012-05-17T00:00:00+00:00</updated>
   <id>http://palletops.com//news/Clojure-West-2012-Pallet-Talk/</id>
   <content type="html">&lt;p&gt;Toni Batchelli gave a &lt;a href=&quot;http://bit.ly/KweuSg&quot;&gt;great talk on pallet basics&lt;/a&gt; at
&lt;a href=&quot;http://clojurewest.org/&quot;&gt;Clojure/West 2012&lt;/a&gt;.&lt;/p&gt;
</content>
   <author>
     <name>Hugo Duncan</name>
     <uri></uri>
   </author>
 </entry>
 
 <entry>
   <title>News: MostlyLazy interview on Pallet at Clojure Conj 2011</title>
   <link href="http://palletops.com//news/MostlyLazy-podcast-interview/"/>
   <updated>2012-02-03T00:00:00+00:00</updated>
   <id>http://palletops.com//news/MostlyLazy-podcast-interview/</id>
   <content type="html">&lt;p&gt;Last year we attended &lt;a href=&quot;http://clojureconj.org&quot;&gt;Clojure Conj&lt;/a&gt; and
&lt;a href=&quot;http://cemerick.com&quot;&gt;Chas Emerick&lt;/a&gt; interviewed us for his
&lt;a href=&quot;http://mostlylazy.com&quot;&gt;MostlyLazy podcast&lt;/a&gt;. Chas published
&lt;a href=&quot;http://mostlylazy.com/2012/02/03/episode-0-0-4-antoni-batchelli-and-hugo-duncan-at-clojure-conj-2011/&quot;&gt;this interview today&lt;/a&gt;,
and he has also done a terrific job at summarizing the topics covered
in the accompanying blog post.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://mostlylazy.com/2012/02/03/episode-0-0-4-antoni-batchelli-and-hugo-duncan-at-clojure-conj-2011/&quot;&gt;Head over to Mostly Lazy&lt;/a&gt; to listen to this 23min interview.&lt;/p&gt;
</content>
   <author>
     <name>Antoni Batchelli</name>
     <uri></uri>
   </author>
 </entry>
 
 <entry>
   <title>News: Pallet Training at Clojure/West is $1000 until Jan 27th</title>
   <link href="http://palletops.com//news/pallet-training-early-bird/"/>
   <updated>2012-01-18T00:00:00+00:00</updated>
   <id>http://palletops.com//news/pallet-training-early-bird/</id>
   <content type="html">&lt;div class=&quot;row&quot;&gt;
  &lt;div class=&quot;span9 offset1&quot;&gt;
    &lt;div class=&quot;alert-message block-message error&quot;&gt;
      &lt;p&gt;The Pallet Workshop at Clojure/West was cancelled. We
      continue to offer on-site training. 
        &lt;a href=&quot;mailto:contact@palletops.com&quot;&gt;Contact us&lt;/a&gt; if you are
          interested. &lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;http://clojurewest.org&quot;&gt;Clojure/West&lt;/a&gt; has decided to offer Early Bird
pricing until
&lt;a href=&quot;http://www.regonline.com/Register/Checkin.aspx?EventID=1041359&quot;&gt;January 27th, at $1000 per seat&lt;/a&gt;.
The price will go back to it&amp;#39;s standard $1200 after this date.&lt;/p&gt;

&lt;p&gt;Hugo and Toni will be teaching Pallet from the ground up for two days
before the conference starts, focusing on real world examples. Check
out
&lt;a href=&quot;http://clojurewest.squarespace.com/training-pallet/;jsessionid=8DF5E59108FC33EC140FF09A2ACFE3B6.web141&quot;&gt;the course description&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Don&amp;#39;t miss this opportunity to learn from the creators of Pallet at a
great price.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.regonline.com/Register/Checkin.aspx?EventID=1041359&quot;&gt;
&lt;image src=&quot;http://clojurewest.org/storage/banner_700.png&quot; width=&quot;90%&quot;/&gt;
&lt;/a&gt;&lt;/p&gt;
</content>
   <author>
     <name>Antoni Batchelli</name>
     <uri></uri>
   </author>
 </entry>
 
 <entry>
   <title>News: Announcing a Documentation Overhaul</title>
   <link href="http://palletops.com//news/new-site/"/>
   <updated>2012-01-17T00:00:00+00:00</updated>
   <id>http://palletops.com//news/new-site/</id>
   <content type="html">&lt;p&gt;The documentation on Pallet has been lagging behind its code base.
This was partially due to a high rate of change, and to our focus on
the platform itself.&lt;/p&gt;

&lt;p&gt;Today, we are happy to announce a new documentation infrastructure
that is the base for this documentation overhaul: a collaboratively
edited website for Pallet. This infrastructure will make creating and
adding manuals, development tips, FAQs and how-tos very easy for
everyone. We are also committed to leading this effort by creating the
bulk of the documentation. We welcome any help.&lt;/p&gt;

&lt;p&gt;As part of this effort we are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Building this website with a setup that allows it to be
collaboratively edited
&lt;a href=&quot;http://github.com/pallet/pallet.github.com&quot;&gt;via GitHub&lt;/a&gt; and using
Markdown.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Making &lt;a href=&quot;http://palletops.com/doc&quot;&gt;palletops.com/doc&lt;/a&gt; the canonical
documentation repository for Pallet. On this note, we are also
removing any other documentation that we have outside this site to
ensure that everyone is accessing this most up-to-date version.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Finally, we are creating RSS feeds for news, documentation updates
and events so that you can keep track of what is new in Pallet-land.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This effort is iterative and we will be adding new features to this
site every few days in the upcoming weeks. You can follow these
updates &lt;a href=&quot;http://palletops.com/news&quot;&gt;in our News page&lt;/a&gt; or by
subscribing to either our
&lt;a href=&quot;http://palletops.com/news/atom.xml&quot;&gt;News RSS feed&lt;/a&gt; or our
&lt;a href=&quot;http://palletops.com/atom.xml&quot;&gt;General RSS feed&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We welcome &lt;a href=&quot;mailto:contact@palletops.com&quot;&gt;any feedback&lt;/a&gt; and help in
this effort. Stay tuned for instructions on how you can help!&lt;/p&gt;
</content>
   <author>
     <name>Antoni Batchelli</name>
     <uri></uri>
   </author>
 </entry>
 
</feed>
